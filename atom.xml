<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason·周的小站</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-19T12:09:50.193Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jason·周的小站</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>故宫博物院 —— 太和门</title>
    <link href="http://example.com/2021/10/19/%E6%95%85%E5%AE%AB%E5%8D%9A%E7%89%A9%E9%99%A2-%E2%80%94%E2%80%94-%E5%A4%AA%E5%92%8C%E9%97%A8/"/>
    <id>http://example.com/2021/10/19/%E6%95%85%E5%AE%AB%E5%8D%9A%E7%89%A9%E9%99%A2-%E2%80%94%E2%80%94-%E5%A4%AA%E5%92%8C%E9%97%A8/</id>
    <published>2021-10-19T12:09:25.295Z</published>
    <updated>2021-10-19T12:09:50.193Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.dpm.org.cn/Uploads/Picture/2020/04/17/s5e9926e6ea567.jpg" alt="img"></p><p>时代：清康熙</p><p>分类：殿</p><p>区域：外朝中路</p><p>　　太和殿，俗称“金銮殿”，位于紫禁城南北主轴线的显要位置，明永乐十八年（1420年）建成，称奉天殿。嘉靖四十一年（1562年）改称皇极殿。清顺治二年（1645年）改今名。自建成后屡遭焚毁，又多次重建，今天所见为清代康熙三十四年(1695年)重建后的形制。<br>　　太和殿面阔11间, 进深5间，建筑面积2377.00㎡，高26.92m，连同台基通高35.05m，为紫禁城内规模最大的殿宇。其上为重檐庑殿顶，屋脊两端安有高3.40m、重约4300kɡ的大吻。檐角安放10个走兽，数量之多为现存古建筑中所仅见。<br>　　太和殿的装饰十分豪华。檐下施以密集的斗栱，室内外梁枋上饰以和玺彩画。门窗上部嵌成菱花格纹，下部浮雕云龙图案，接榫处安有镌刻龙纹的鎏金铜叶。殿内金砖铺地，明间设宝座，宝座两侧排列6根直径1.00m的沥粉贴金云龙图案的巨柱，所贴金箔采用深浅两种颜色，使图案突出鲜明。宝座前两侧有四对陈设：宝象、甪（音录）端、仙鹤和香亭。宝象象征国家的安定和政权的巩固；甪端是传说中的吉祥动物；仙鹤象征长寿；香亭寓意江山稳固。宝座上方天花正中安置形若伞盖向上隆起的藻井。藻井正中雕有蟠卧的巨龙，龙头下探，口衔宝珠。<br>　　太和殿前有宽阔的平台，称为丹陛，俗称月台。月台上陈设日晷、嘉量各一，铜龟、铜鹤各一对，铜鼎18座。龟、鹤为长寿的象征。日晷是古代的计时器，嘉量是古代的标准量器，二者都是皇权的象征。殿下为高8.13m的三层汉白玉石雕基座，周围环以栏杆。栏杆下安有排水用的石雕龙头，每逢雨季，可呈现千龙吐水的奇观。<br>　　明清两朝24个皇帝都在太和殿举行盛大典礼，如皇帝登极即位、皇帝大婚、册立皇后、命将出征，此外每年万寿节、元旦、冬至三大节，皇帝在此接受文武官员的朝贺，并向王公大臣赐宴。清初，还曾在太和殿举行新进士的殿试，乾隆五十四年（1789年）始，改在保和殿举行，“传胪”仍在太和殿举行。<br>　　太和殿是紫禁城内体量最大、等级最高的建筑物，建筑规制之高，装饰手法之精，堪列中国古代建筑之首。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://www.dpm.org.cn/Uploads/Picture/2020/04/17/s5e9926e6ea567.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;时代：清康熙&lt;/p&gt;
&lt;p&gt;分类：殿&lt;/p&gt;
&lt;p&gt;区域：外朝中路&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OI梗</title>
    <link href="http://example.com/2021/10/17/OI%E6%A2%97/"/>
    <id>http://example.com/2021/10/17/OI%E6%A2%97/</id>
    <published>2021-10-17T04:13:07.225Z</published>
    <updated>2021-10-17T04:16:40.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OI梗"><a href="#OI梗" class="headerlink" title="OI梗"></a>OI梗</h1><p>本条目收录与**<a href="https://zh.moegirl.org.cn/OI">OI</a>**（信息学竞赛，英语：Olympiad in Informatics）及其参赛选手圈子有关的流行文化。</p><p>本条目仅收录常见梗，过于专业的用语不予收录，寻找专业用语请去<a href="https://oi-wiki.org/">OI Wiki</a>等专业网站。</p><table><thead><tr><th>“</th><th>模拟只会猜题意，贪心只能过样例。数学上来先打表，DP一般看规律。 组合数学靠运气，计算几何瞎暴力。图论一顿套模板，数论只会GCD。</th><th>”</th></tr></thead><tbody><tr><td>——请问说这句话的是蒟蒻还是大佬？</td><td></td><td></td></tr></tbody></table><h2 id="OI用语"><a href="#OI用语" class="headerlink" title="OI用语"></a>OI用语</h2><h3 id=""><a href="#" class="headerlink" title="%%%"></a>%%%</h3><p><a href="https://zh.moegirl.org.cn/File:Mod.png"><img src="https://img.moegirl.org.cn/common/thumb/d/d1/Mod.png/300px-Mod.png" alt="img"></a></p><p>膜拜大佬的场面</p><p>“<strong>%%%</strong>“是汉语“膜拜”的同义词，百分号越多，语气越强。</p><p>“<strong>%</strong>“是数学中的百分号，同时在包括<a href="https://zh.moegirl.org.cn/C%E8%AF%AD%E8%A8%80%E5%A8%98">C</a>、<a href="https://zh.moegirl.org.cn/C%2B%2B%E5%A8%98">C++</a>等大多数编程语言中**%**也指取余或取模（类似除法中的余数，但对于负数取模和取余不同）</p><p>因”<strong>%</strong>“可读作模，并且较易于书写，它常被用于膜拜<a href="https://zh.moegirl.org.cn/%E5%A4%A7%E4%BD%AC">大佬</a>，或吐槽意想不到但又很牛的操作，常与<a href="https://zh.moegirl.org.cn/OI%E6%A2%97#%E7%A5%9E%E7%8A%87">神犇</a>同时出现。</p><p>例如：</p><ul><li>–这道题很简单，（贴出代码）<br>–<strong>%%%%%%%%%</strong></li><li>–（贴出一份暴力但是可行的代码）<br>–<strong>%%%%%%%%%</strong></li><li><code>%*n (n&gt;=3)</code></li><li><code>while(1) putchar(&#39;%&#39;);</code></li></ul><h3 id="蒟蒻"><a href="#蒟蒻" class="headerlink" title="蒟蒻"></a>蒟蒻</h3><p><a href="https://zh.moegirl.org.cn/File:Juruo.jpg"><img src="https://img.moegirl.org.cn/common/thumb/8/8c/Juruo.jpg/300px-Juruo.jpg" alt="img"></a></p><p><a href="https://zh.moegirl.org.cn/%E7%9C%9F%C2%B7oo">真·蒟蒻</a></p><p><strong>蒟蒻</strong>（jǔ ruò）（拉丁文学名：<em>Amorphophallus konjac</em>）本义是天南星科魔芋属多年生宿根性块茎草本植物[<a href="https://zh.moegirl.org.cn/OI%E6%A2%97#cite_note-1">1]</a>及以其为原料制作的食物。</p><p>因谐音”巨弱”，在OI圈中通常用作谦辞，表示自己很弱拜托，你很弱诶，常与<a href="https://zh.moegirl.org.cn/OI%E6%A2%97#%E7%A5%9E%E7%8A%87">神犇</a>连用。</p><p>蒟蒻这种说法在界外人士看上去很弱智，毕竟哪有自己说自己蠢的。</p><p>但是如上文，蒟蒻其实更像是一种自谦，<del>方便自己不要脸的去问人题以及</del>一种对他人工作的肯定。</p><p>几乎没有OIer会说别人是蒟蒻，毕竟每个人的潜力都是无限的，这也是OI圈里不成文的礼仪之一。</p><p><del>这也在你的计算范围之内吗？OIer！</del></p><p>例如：</p><ul><li>这么<a href="https://www.luogu.com.cn/problem/P1001">简单的题</a>都不会做，我真是个蒟蒻</li><li>蒟蒻前来膜拜<a href="https://www.luogu.com.cn/user/1">大佬</a></li></ul><h3 id="神犇-巨佬"><a href="#神犇-巨佬" class="headerlink" title="神犇/巨佬"></a>神犇/巨佬</h3><p><strong>神犇（bēn）</strong>、<strong>巨佬</strong>等是OI圈内的敬辞，通常在各大OI社区（如<a href="https://www.luogu.com.cn/">洛谷</a>等）中代替<strong>大牛</strong>或**<a href="https://zh.moegirl.org.cn/%E5%A4%A7%E4%BD%AC">大佬</a>**。</p><p>“神犇”为“大牛”一词的升级版，“巨佬”（或“硕佬”）则是“大佬”的升级版（此外还有“奆佬”“㚐奆佬”“夶奆佬”这样的叠字版）。</p><p>常用于称赞指代方技术高超，常与<a href="https://zh.moegirl.org.cn/OI%E6%A2%97#%%%">%%%</a>同时出现，一般用作第三人称。一般不用于自称</p><p>例如：<a href="https://zh.moegirl.org.cn/OI%E6%A2%97#%E8%92%9F%E8%92%BB">蒟蒻</a>前来膜拜神犇。</p><table><thead><tr><th>“</th><th>他站住了，脸上现出欢喜和凄凉的神情；动着嘴唇，却没有作声。他的态度终于恭敬起来了，分明的叫道：“<strong>巨佬</strong>！……”我似乎打了一个寒噤；我就知道，我们之间已经隔了一层可悲的厚障壁了。我也说不出话。</th><th>”</th></tr></thead><tbody><tr><td>——鲁迅</td><td></td><td></td></tr></tbody></table><p>有时在OI题目中出现，用于夸奖<strong>做出（AC）</strong>题的人或鼓励人们做题（<a href="https://www.luogu.com.cn/problem/P1914">e.g.</a>）。</p><p>展开著名神犇</p><h3 id="水题"><a href="#水题" class="headerlink" title="水题"></a>水题</h3><p>（待补充） <strong>水题</strong>是指一道题过于简单，一般为竞赛的第一题。(除了CSP-S2020的第一题)（还有NOIOLINE-提高2021的第一题，第一题是黑题就离谱（愤怒的小N））</p><p>此处“水”字的意义应该与百度贴吧中的水贴的水意义相同，意为无内涵。<del>当然也可以理解为灌水</del></p><p>此类题目可以是</p><ul><li>字符串处理，如：<del>优秀的拆分（NOI的）</del></li><li>简单的模拟，如：<del>猪国杀</del> ，<del>儒略日</del>，<del>立方体</del></li><li>嗯，即使是水题也有可能拿高精度加减来坑人。有时还会有一些恶心人的题限制数组大小逼你开vector，或者是让手打队列瘫痪逼你用queue,这种水题做的时候一定要注意数据范围和时间，空间！还是那句话，不开long long见祖宗。（本条为编写本条者的亲身经历）</li><li>指DFS（点分树）和BFS（边分树）紫荆花之恋</li><li>水题可以表示一些简单算法的常规运用，比如<a href="https://www.luogu.com.cn/problem/CF372C">转移方程显而易见的DP</a>。</li><li><del><a href="https://www.luogu.com.cn/problem/P4688">众所周知水题是相对而论的</a></del></li></ul><p>注意事项：</p><ul><li>不开long long见祖宗；</li><li>不写freopen见祖宗（指比赛）；</li><li>大数据处理取模取错见祖宗；</li><li>数组开小见祖宗；</li><li><a href="https://www.luogu.com.cn/problem/P4117">内存超限见祖宗</a>；</li><li>文件名打错见祖宗；</li><li><a href="https://www.luogu.com.cn/problem/P1469">用了cin/cout见祖宗</a>；</li><li>freopen注释忘记去掉见祖宗；</li></ul><h3 id="自动机"><a href="#自动机" class="headerlink" title="自动机"></a>自动机</h3><p><strong>自动机</strong>是OI圈中的一种表述，多为玩笑话，oo自动机表示自己的某个程序于OJ（Online Judge）上提交后全为oo状态（如WA（Wrong Answer））。</p><p><strong>oo自动机</strong>原型为<strong>AC自动机</strong>，本义为一种字符串匹配的算法，具体参见<a href="https://zh.wikipedia.org/wiki/AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%AE%97%E6%B3%95">AC自动机</a>。</p><p>由于其中的AC与OJ上的评测状态A C（Accepted）相同，不少人就拿此吐槽，还衍生出了其他的用法。例如：</p><ul><li>自动AC机（自动AC的代码）但千万不要这么做，你会被惩罚的（比如在洛谷上变成棕名）</li><li>RE自动机（全部都发生运行时错误R E（Runtime Error）数组越界除零溢出之类的，有时递归过深也会）</li><li>WA自动机（提交上去全部答案错误W A（Wrong Answer））</li><li>TLE自动机（全部超过时间限度T L E（Time Limit Exceeded）时间时间复杂度过高或程序中有无法退出的循环或递归）</li><li>MLE自动机（全部超出空间限度M L E（Memory Limit Exceeded）数组开得过大或递归过深）</li><li>OLE自动机（全部超出输出限度O L E（Output Limit Exceeded））</li><li>UKE自动机（未知错误U K E（Unknown Error），一般不是代码的锅）</li><li><a href="https://zh.wikipedia.org/wiki/%E7%BB%86%E8%83%9E%E8%87%AA%E5%8A%A8%E6%9C%BA">元胞自动机</a><ul><li><del><a href="https://zh.moegirl.org.cn/%E6%9C%88%E7%81%B5%E6%99%B6%E4%BD%93">Mooncell Automaton</a></del></li></ul></li></ul><h3 id="卡常"><a href="#卡常" class="headerlink" title="卡常"></a>卡常</h3><p>“卡常”全称“卡常数”，指运用各种<del>奇技淫巧</del>方法，针对程序基本操作减小程序在时间或空间上的常数因子，使之在规定的时空限制内通过测试用例；也可以指由于高强度或针对性的数据，时空复杂度正确并且实现无误的算法没能在时空限制内通过测试用例。</p><p>常用的卡常方法有快读快写，位运算，循环展开，调块长，手工栈等。</p><p>展开卡常原理</p><p>用法：</p><ul><li>程序跑了1.01s而时限1.00s<ul><li>这代码卡卡常就过了。</li></ul></li><li>使用时间复杂度正确的算法却由于常数大没能过题<ul><li>写了个分块被卡了。</li></ul></li><li>看到时间复杂度玄学的算法却由于常数小过题<ul><li>复杂度卡常后想必是O(松)吧。</li></ul></li></ul><p>展开著名卡常题</p><h3 id="爆零"><a href="#爆零" class="headerlink" title="爆零"></a>爆零</h3><p>爆零在是OI圈指在一场考试中获得零分。</p><p>（待补充）</p><h3 id="机惨"><a href="#机惨" class="headerlink" title="机惨"></a>机惨</h3><p>机惨全称为机房惨案，指因为一个人用机房的做了一些会被封号的事情，导致被网站封禁ip地址，从而导致整个机房都被封禁的情况。</p><p>因为学校机房用的是局域网，而局域网的电脑有一个公共的ip地址，于是就发生了机房惨案。</p><p>举个例子，有人在洛谷上搞事情，就会让洛谷管理员查到你的ip地址，然后随手一封，整个机房的电脑不能上洛谷了，<a href="https://zh.moegirl.org.cn/%E5%8F%AF%E5%96%9C%E5%8F%AF%E8%B4%BA">可喜可贺</a>。</p><p>因为OIer们大多珍惜自己的洛谷账号，所以这种情况的发生，通常出现在交完代码之后，忘记关洛谷，然后被喜欢搞事的人看到。所以建议在洛谷团队或Q群而不是洛谷讨论版进行机惨</p><p>I AK IOI!</p><h2 id="OI典故-成句"><a href="#OI典故-成句" class="headerlink" title="OI典故/成句"></a>OI典故/成句</h2><h3 id="加边！加边！加边！"><a href="#加边！加边！加边！" class="headerlink" title="加边！加边！加边！"></a>加边！加边！加边！</h3><p><strong>加边！加边！加边！</strong>是WC2021放映的WC2020宣传片中的一个句子。</p><p>原句是“这是l，这是r，这些边我不加。这些边我不加，暴力怎么做？加边！加边！加边！好，然后并查集查询。” 因为这句话十分洗脑，所以每到宣传片广告放到这一段的时候，聊天区内就刷屏这句话。</p><p>用法举例：</p><ul><li>这是l，这是r，这些边我不加。这些边我不加，暴力怎么做？加边！加边！加边！好，然后并查集查询。</li><li>What about violence? Add edge! Add edge! Add edge! OK, and then search the set.</li><li>瞎编！瞎编！瞎编！</li><li>（待补充）</li></ul><h3 id="关于SPFA，它死了"><a href="#关于SPFA，它死了" class="headerlink" title="关于SPFA，它死了"></a>关于SPFA，它死了</h3><p><a href="https://zh.moegirl.org.cn/File:SPFA.PNG"><img src="https://img.moegirl.org.cn/common/thumb/2/28/SPFA.PNG/300px-SPFA.PNG" alt="img"></a></p><p>SPFA算法示意图</p><p><strong>关于oooo，它死了</strong>是一句OI圈的吐槽用语，表示oooo已经失去效力。</p><p>这个梗的由来是NOI2018。NOI2018 d1t1 归程需要使用最短路算法，而可用的一种最短路算法<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E5%BF%AB%E9%80%9F%E7%AE%97%E6%B3%95">SPFA</a>的时间复杂度是不确定的。所以出题人卡了这个算法的时间[<a href="https://zh.moegirl.org.cn/OI%E6%A2%97#cite_note-2">2]</a>，并在讲评ppt上表示“关于SPFA，它死了”，这个梗因此诞生。</p><p>后来，当NOIP（<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E5%9B%BD%E9%9D%92%E5%B0%91%E5%B9%B4%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%A5%A5%E6%9E%97%E5%8C%B9%E5%85%8B%E8%81%94%E8%B5%9B">全国青少年信息学奥林匹克联赛</a>）在2019年因未知原因停办[<a href="https://zh.moegirl.org.cn/OI%E6%A2%97#cite_note-3">3]</a>后，洛谷站长kkksc03在第九次洛谷Fan Meeting上用“关于NOIP，它死了”进行了吐槽[<a href="https://zh.moegirl.org.cn/OI%E6%A2%97#cite_note-4">4]</a>，将这个梗进一步发扬光大。（目前NOIP已复活[<a href="https://zh.moegirl.org.cn/OI%E6%A2%97#cite_note-5">5]</a>）</p><p>用法举例：</p><ul><li>关于SPFA，它死了</li><li>关于NOIP，它死了</li><li>关于NOIP，它复活了</li><li>关于CSP，它SPFA了</li><li>（待补充）</li></ul><h3 id="I-AK-IOI"><a href="#I-AK-IOI" class="headerlink" title="I AK IOI"></a>I AK IOI</h3><p><a href="https://zh.moegirl.org.cn/File:AK-IOI.png"><img src="https://img.moegirl.org.cn/common/7/71/AK-IOI.png" alt="img"></a></p><p>某位OIer的失智发言</p><p><strong>I AK IOI</strong>（oo AK xx）是OI圈的一个成句，常见于洛谷等具有讨论功能的OJ或其他社交平台。</p><p>其中AK意为“All-Killed”表示一套题里全部满分，与之相对的有AF “All-Failed”；后方的“IOI”则是<a href="https://zh.moegirl.org.cn/OI">OI</a>的国际总决赛。</p><p>但是根据OI界<del>日常装弱</del>的气氛，这种说法存在可能性本应不大。</p><p>实际上，这很有可能源于OIer日常夸别人神犇配上的一句话，或者只是某种事实的阐述。</p><p>需要注意的是，并不能随便说一个人AK了某某竞赛，这很有可能会被当做<a href="https://zh.moegirl.org.cn/%E9%98%B4%E9%98%B3%E6%80%AA%E6%B0%94">阴阳怪气</a>。</p><p>如果你本来的目的就是如此那就不必在乎了</p><p>用法举例：</p><ul><li><p>NOIp</p><p>-J</p><p>终试结果出来后</p><ul><li>哇，我居然AK了NOIp！</li></ul></li><li><p>某个用户的比赛期间有人满分</p><ul><li>恭喜 XX AK了某某比赛</li></ul></li><li><p>阴阳怪气（损人用）</p><ul><li>你个巨佬，YOU AK IOI CTSC ！！！</li></ul></li><li><p><del><a href="https://zh.moegirl.org.cn/I_Wanna_Be_the_Guy">I wanna AK IOI</a></del></p></li><li><p>jfca</p><ul><li><del>在某些OJ上发”I AK IOI”，常与交题解配合食用</del></li></ul></li></ul><h3 id="骗分导论"><a href="#骗分导论" class="headerlink" title="骗分导论"></a>骗分导论</h3><p>一开始是ID为“我是智障”（方宇浩）发表的一篇论文，其中用大量事实整合了在竞赛中如何赚取部分分甚至满分的方法。</p><p>后来被很多人整合成了顺口溜，比如：</p><p><strong>骗分过样例，暴力出奇迹。暴搜挂着机，打表出省一。N方过百万，暴力踩标算。肥修赛大象，只是代码短</strong>。</p><p><strong>想要骗到分，一定有方法。图论背模板，数论背公式，动规背方程，高精背代码，要是都不会，干脆输样例</strong>。</p><p><a href="https://zh.moegirl.org.cn/File:%E4%BD%A0%E7%9A%84NOIP.jpeg"><img src="https://img.moegirl.org.cn/common/thumb/5/51/%E4%BD%A0%E7%9A%84NOIP.jpeg/200px-%E4%BD%A0%E7%9A%84NOIP.jpeg" alt="你的NOIP.jpeg"></a></p><p>骗分在某些看起来难实际上用枚举、打表（如说在运算中需要求质数，在线求会比较慢，于是就离线先算好，把整个质数表存在一个常量数组里面，就是打表。）这种比较简单的算法来使此题AC或拿分从而不至于爆零。</p><p>如在<a href="https://www.luogu.com.cn/problem/P4518">JSOI2018</a>的绝地反击题中需要用到计算几何+二分图匹配，在一些人不会的情况下，有人才发现maxi=1ndist((x0,y0),(xi,yi))−r只要能够算出来直接就能拿到50分。</p><p>骗分虽然有效，但是是歪门邪道，不要靠着每道题骗分的想法去比赛。其中“我是智障”表明：“骗分的最高境界就是不骗分”（其实能骗到分就已经非常香了）</p><p>另外，有人才把这句话P在了《你的名字。》的海报上，有好几版，这里放出最经典的一版。</p><ul><li>暴力</li></ul><p>n方过百万就是暴力的一种，从字面意思理解，就是开两次循环去模拟整个过程，然后得到OI赛制的部分测评点分（ACM赛制不可）</p><ul><li>炸测评姬（早期属于骗分的一种）</li></ul><p>在提交的c++程序中加入<code>#include&lt;con&gt;</code> （windows系统中使用）或 <code>#include&lt;/dev/console&gt;</code> （Linux系统中使用） 它非常强大，可以卡住评测系统，使其永远停止不了编译你的程序。唯一的解除方法是，工作人员强行关机，重启，重测。当然，我不保证他们不会气愤地把你的成绩变成0分。请慎用此方法。</p><h3 id="o年OI一场空，xxxx见祖宗"><a href="#o年OI一场空，xxxx见祖宗" class="headerlink" title="o年OI一场空，xxxx见祖宗"></a>o年OI一场空，xxxx见祖宗</h3><p><strong>o年OI一场空，xxxx见祖宗</strong>是一句用于吐槽自己或他人在OI赛场上的表现的成句。</p><p>在每次OI比赛中，总有人写了一些沙雕的代码，而他们又总是后知后觉，在各大论坛上诉苦哭天喊地。本句具体出处未知。</p><p>用法举例（此处的“十”仅为示例，应用时可根据实际酌情更改）：</p><ul><li>十年OI一场空，<a href="https://www.luogu.com.cn/problem/P5657">没开ull</a>见祖宗 //因为n≤64，long long只能表示263−1，所以有一个测试点过不去</li><li>十年OI一场空，<a href="https://www.luogu.com.cn/problem/P5657">开了long long</a>见祖宗 //同上</li><li>十年OI一场空，<a href="https://www.luogu.com.cn/problem/P4768">SPFA</a>见祖宗 //SPFA算法复杂度为O(km)，但是在某些特殊构造（丧心病狂）的数据上会退化到 O(nm)</li><li>十年OI一场空，先做T1见祖宗。//指CSP-S 2020，你懂得</li><li>十年OI一场空，没加特判见祖宗。//CSP-S 2020 T2存在n=0,k=64的情况，会爆unsigned long long</li><li>十年OI一场空，文件打错见祖宗。//NOI系列竞赛需要使用文件输入输出，而如果文件名书写错误或没写就会失掉整题的分</li><li>十年OI一场空，没写高精见祖宗。//NOIP 2020 T1 会爆ull，必须写高精度CCF的精度限制一年比一年高，快进到(ry</li></ul><h3 id="太皱的纸飞机飞不远"><a href="#太皱的纸飞机飞不远" class="headerlink" title="太皱的纸飞机飞不远"></a>太皱的纸飞机飞不远</h3><p>出自NOI 2022的宣传片。</p><p>其中一位小姑娘拿着一张被弄的皱皱巴巴的卷纸并叠成了纸飞机扔了出去，字幕上写着“太皱的纸飞机飞不远”</p><p>有眼尖的OIer发现这被糟蹋的卷子正是隔壁物理竞赛决赛的模拟卷#ccf把物竞题叠纸飞机扔# #CCF正式对CPS开战#</p><p><a href="https://zh.moegirl.org.cn/File:Noip2022_0.jpg"><img src="https://img.moegirl.org.cn/common/thumb/6/6e/Noip2022_0.jpg/200px-Noip2022_0.jpg" alt="Noip2022 0.jpg"></a></p><p><a href="https://zh.moegirl.org.cn/File:Noip2022_1.jpg"><img src="https://img.moegirl.org.cn/common/thumb/e/e4/Noip2022_1.jpg/200px-Noip2022_1.jpg" alt="Noip2022 1.jpg"></a></p><h3 id="rp"><a href="#rp" class="headerlink" title="rp++"></a>rp++</h3><p><strong>rp</strong>是“<a href="https://zh.moegirl.org.cn/%E4%BA%BA%E5%93%81">人品</a>”的缩写，代指运气；**<code>++</code><strong>是C语言家族中的自加号（<a href="https://zh.moegirl.org.cn/%2B1">+1</a>）。OI圈内常用</strong>rp++**祝福自己或他人在比赛时能人品爆发。</p><p>当然这也成为了OI教师们锻炼<del>陷害</del>学生的理由，比如“你下课打扫一下机房吧，rp++。”</p><p>类似的用法还有<code>rp++;</code>、<code>while(1) rp++;</code>、“rp爆unsigned long long”等。</p><p>关于RP,在<a href="https://www.luogu.com.cn/problem/P1509">某道变量名为rp的题中</a>，会有人把某些语句改成不影响结果的rp++</p><h3 id="qp"><a href="#qp" class="headerlink" title="qp"></a>qp</h3><p>汉语前排的缩写，适合在某贴前三回复。</p><ul><li>qp有以下变种</li></ul><p>前排兜售绿鸟：来自于luogu著名管理<em>Chen_Zhe</em>以前的头像</p><p>前排兜售main包：来自于luogu前著名管理“百万性扩散甜面包”，并结合了c++中主函数的关键字main</p><p>hp：是指后排，有某种抢不到前排的悲哀</p><h3 id="我来NOIP只做三件事！oo！oo！oo！"><a href="#我来NOIP只做三件事！oo！oo！oo！" class="headerlink" title="我来NOIP只做三件事！oo！oo！oo！"></a>我来NOIP只做三件事！oo！oo！oo！</h3><p><strong>我来NOIP只做三件事！oo！oo！oo！</strong>是从电影《让子弹飞》中截取片段进行填词，大多是自嘲当自己在试机或者竞赛时不会做题时的表现。最后一群人跪下的画面非常喜感。</p><p><a href="https://zh.moegirl.org.cn/File:%E6%88%91%E6%9D%A5NOIP%E5%8F%AA%E5%81%9A3%E4%BB%B6%E4%BA%8B.gif"><img src="https://img.moegirl.org.cn/common/thumb/7/76/%E6%88%91%E6%9D%A5NOIP%E5%8F%AA%E5%81%9A3%E4%BB%B6%E4%BA%8B.gif/200px-%E6%88%91%E6%9D%A5NOIP%E5%8F%AA%E5%81%9A3%E4%BB%B6%E4%BA%8B.gif" alt="我来NOIP只做3件事.gif"></a></p><p>用法举例：</p><ul><li>“我来NOIP只做三件事！爆零！睡觉！扫雷！（跪）”</li><li>“我来NOIP只做三件事！拿饭票！吃饭！走人！（跪）”</li><li>“我来NOIP只做三件事！爆零！爆零！还是TMD爆零！（跪）”</li><li>“我来NOIP只做三件事！骗分！打表！省一！（跪）”</li></ul><h3 id="A-B"><a href="#A-B" class="headerlink" title="A+B"></a>A+B</h3><table><thead><tr><th>“</th><th>输入两个整数 a,b，输出它们的和</th><th>”</th></tr></thead><tbody><tr><td>——A+B Problem[<a href="https://zh.moegirl.org.cn/OI%E6%A2%97#cite_note-6">6]</a></td><td></td><td></td></tr></tbody></table><p>由于实现极为简单，故常作为OJ的试机题，以使新用户熟悉OJ的操作。</p><p>因为非常简单，所以经常被巨佬们乱搞，成为史上做法最多的题。</p><p>展开目前可以做的算法</p><h3 id="说句闲话：研究xx的最好方法是-oo将会臭名昭著"><a href="#说句闲话：研究xx的最好方法是-oo将会臭名昭著" class="headerlink" title="说句闲话：研究xx的最好方法是/oo将会臭名昭著"></a>说句闲话：研究xx的最好方法是/oo将会臭名昭著</h3><p><strong>说句闲话：研究xx的最好方法是/oo将会臭名昭著</strong>是OI圈的一个成句，来自于洛谷上<a href="https://www.luogu.com.cn/discuss/show/61884">uke同志抄袭题解后发的帖</a>，他在帖中侮辱管理员和洛谷，导致他如愿以偿地被棕名（已变回蓝名）。由于洛谷的几乎所有管理员回复了该帖，它成为洛谷史上最大管理员狂欢，它在OI圈中广泛传播，至今仍有人考古，也有人模仿它的格式发帖和回复。</p><h3 id="全家桶"><a href="#全家桶" class="headerlink" title="全家桶"></a>全家桶</h3><p><strong>全家桶</strong>，可以用于形容所有成系列的题集，但最常用于形容各式多项式相关题目。因为多项式相关题目数量较大，且难度评级很高，洛谷曾下调过一批多项式题目的难度，引起了相当程度的讨论。</p><p>用法举例：</p><ul><li>做多项式题就像嗑药，出多项式题就像贩毒。—— 某 FJ 知名 OI 选手</li></ul><h2 id="OI中常出现的人物"><a href="#OI中常出现的人物" class="headerlink" title="OI中常出现的人物"></a>OI中常出现的人物</h2><h3 id="Farmer-John"><a href="#Farmer-John" class="headerlink" title="Farmer John"></a>Farmer John</h3><p><strong>Farmer John</strong>是USACO题目的<a href="https://zh.moegirl.org.cn/%E9%80%9A%E9%85%8D%E8%A7%92%E8%89%B2">通配角色</a>。USACO最大工具人</p><p>USACO每套题必会出现的人物，其工具人效果超出任何一类题目中的角色。</p><p>每天都要干农活，养无数的奶牛，有时还会被奶牛坑。</p><p>像是大多数的OI（如NOIp和CSP）中的人物名字都是换着来的，只有USACO是在反复迫害Farmer John。</p><p>现在已经成为众多OIer的迫害对象，在洛谷等用户可出题OJ被广为流传。</p><h3 id="Bessie"><a href="#Bessie" class="headerlink" title="Bessie"></a>Bessie</h3><p><strong>Bessie</strong>也是USACO题目的<a href="https://zh.moegirl.org.cn/%E9%80%9A%E9%85%8D%E8%A7%92%E8%89%B2">通配角色</a>。USACO第二大工具人</p><p>USACO题目中大量出现的<del>人物</del>奶牛。</p><p>每天都在干一些奇奇怪怪的事，比如去DQ打工，找Farmer John要打工钱，带领奶牛暴动。</p><p>Bessie出现的题都会加倍迫害Farmer John。</p><h3 id="其他通配角色"><a href="#其他通配角色" class="headerlink" title="其他通配角色"></a>其他通配角色</h3><ul><li>洛谷原创角色<ul><li>小A</li><li>Uim（伍伊姆）</li><li>八尾勇</li><li>正妹</li></ul></li><li>JOI君</li><li>Bessie</li><li>金明</li><li>Vani</li><li>高桥君（AtCoder的迫害对象)</li></ul><h3 id="常出现的ACG角色"><a href="#常出现的ACG角色" class="headerlink" title="常出现的ACG角色"></a>常出现的ACG角色</h3><ul><li><a href="https://zh.moegirl.org.cn/%E4%B9%9D%E6%9D%A1%E5%8F%AF%E6%80%9C">九条可怜</a></li><li><a href="https://zh.moegirl.org.cn/%E7%8F%82%E6%9C%B5%E8%8E%89">珂朵莉</a></li><li><a href="https://zh.moegirl.org.cn/%E6%88%91%E5%A6%BB%E7%94%B1%E4%B9%83">我妻由乃</a></li><li><a href="https://zh.moegirl.org.cn/%E4%B8%9C%E6%96%B9Project">东方Project</a>全员</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="OI数字梗"><a href="#OI数字梗" class="headerlink" title="OI数字梗"></a>OI数字梗</h3><h3 id="OI中的ASCII艺术"><a href="#OI中的ASCII艺术" class="headerlink" title="OI中的ASCII艺术"></a>OI中的ASCII艺术</h3><h2 id="注释和外部链接"><a href="#注释和外部链接" class="headerlink" title="注释和外部链接"></a>注释和外部链接</h2><ol><li><a href="https://zh.moegirl.org.cn/OI%E6%A2%97#cite_ref-1">跳转↑</a> <a href="https://zh.wikipedia.org/wiki/%E8%92%9F%E8%92%BB">zhwiki:蒟蒻</a></li><li><a href="https://zh.moegirl.org.cn/OI%E6%A2%97#cite_ref-2">跳转↑</a> 简单的阐述一下，就是SPFA算法消耗的时间有可能在极端情况成为一般情况的数千倍，相比之下同样可以使用的Dijkstra算法则不会有此特性。</li><li><a href="https://zh.moegirl.org.cn/OI%E6%A2%97#cite_ref-3">跳转↑</a> <a href="https://www.noi.cn/xw/2019-08-16/715365.shtml">停办通知</a></li><li><a href="https://zh.moegirl.org.cn/OI%E6%A2%97#cite_ref-4">跳转↑</a> <a href="https://www.bilibili.com/video/av81182518">【FMT#9】洛谷 Fan Meeting Live #9 回放</a> 第3:23秒</li><li><a href="https://zh.moegirl.org.cn/OI%E6%A2%97#cite_ref-5">跳转↑</a> <a href="https://www.noi.cn/xw/2020-09-11/715631.shtml">重办通知</a></li><li><a href="https://zh.moegirl.org.cn/OI%E6%A2%97#cite_ref-6">跳转↑</a> <a href="https://www.luogu.com.cn/problem/P1001">https://www.luogu.com.cn/problem/P1001</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OI梗&quot;&gt;&lt;a href=&quot;#OI梗&quot; class=&quot;headerlink&quot; title=&quot;OI梗&quot;&gt;&lt;/a&gt;OI梗&lt;/h1&gt;&lt;p&gt;本条目收录与**&lt;a href=&quot;https://zh.moegirl.org.cn/OI&quot;&gt;OI&lt;/a&gt;**（信息学竞赛，英语：O</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>从零开始建立一个网站</title>
    <link href="http://example.com/2021/10/13/%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99/"/>
    <id>http://example.com/2021/10/13/%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99/</id>
    <published>2021-10-13T11:42:24.089Z</published>
    <updated>2021-10-13T11:45:47.313Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写给想要拥有一个自己的网站但没有资金成本的小白与曾经的自己。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽说是网站，对于个人来说，或许一般叫作博客。<br>但我不希望它仅仅是一个博客，而是能够成为一个处于自己现实生活之外、自由、实验、不用畏惧他人眼光甚至可以独断专行的地方。</p><p>当然，这本质还是一个新手向教程，也许会有点科普的感觉。<br>我会从整体上对搭建网站的流程和使用到的技术及步骤进行介绍（因为要铺开讲，倘若包括轶事，实在太多太杂，我也会点到为止），并让你明白这个东西在网站的过程中起到什么样的作用。<br>但我不会就细枝末节展开叙述，譬如如何注册账号、安装时如何点击下一步。<br>我希望看完此篇文章后，此前对此方面知识一无所知的小白，到最后也能搭建出一个属于自己的站点。（前提是认识基础的英语单词和善用搜索引擎）</p><p>已经有所基础的同学大可跳读或者直接关闭。</p><blockquote><p>注释处多为相关补充说明，对正常流程没有影响，若没有兴趣，可以略过。</p></blockquote><p>与文章相关疑问都可在本文章的 GitHub Issues 中进行评论，其他疑问可到对应项目或文章下评论。</p><p>我会尽可能保持更新该文章所使用到的技术和做法，并随时接受勘误。</p><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><ul><li>Hexo</li><li>静态博客</li><li>无服务器</li><li>GitHub Pages</li><li><a href="https://github.com/YunYouJun/hexo-theme-yun">hexo-theme-yun</a>（私货）</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><blockquote><p><strong>什么是 Node.js ？</strong><br>这得从什么是 JS 说起，JS 也就是 JavaScript。（为什么有种从盘古开天辟地开始的感觉）没错，JavaScript 就是网页的盘古。JavaScript 是一种编程语言，我们所见到的网页中的交互和逻辑处理几乎都是由 JavaScript 完成。<br>JavaScript 语法简单，易学易用。（当然也请不要小瞧它，虽然它入门门槛低，但上限同样也很高。包括但不限于实现网站前后端，手机桌面应用程序，机器学习，计算机图形学等。）<br>在 Node.js 诞生前，JavaScript 都运行于浏览器端。也就是说，它是鱼，浏览器是装满了水的水缸。<br>2008 年，Chrome V8 诞生。2009 年，Node.js 诞生。并成为 GitHub 早期最著名的开源项目。GitHub 可能大家已有所了解，后续再说。<br>Node.js 便是一个基于 Chrome V8 引擎的 JavaScript 运行环境。（当年第一次看到这句话时，我也一脸懵逼。）按照我的理解，JavaScript 是鱼，Chrome V8 就是抽水机，Node.js 则把这台抽水机也装在你电脑上。于是你的电脑也有了 Node.js 这个和浏览器相似的水缸，也可以在里面运行 JavaScript 了！<br>当然 Node.js 和浏览器端还是因为自身定位和一些历史原因而有些许区别的，不再展开。<br><a href="https://baike.baidu.com/item/node.js/7567977">Node.js | 百度百科</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript | MDN</a></p></blockquote><p><a href="https://nodejs.org/zh-cn/">下载｜ Node.js</a></p><p>建议下载<strong>长期支持版</strong>而非<strong>当前发布版</strong>（因为如果是最新版，容易出现一些奇妙的 bug）。</p><p>全部默认下一步进行安装。</p><p>Windows 打开命令提示符，macOS 打开终端。（= =，这个不会就请百度吧。）<br>Linux 用户右上角关闭本标签页。</p><p>后续如提到输入命令，均默认指打开终端进行输入。</p><p>输入 <code>node --version</code>，如果得到的版本号与你方才安装的一致，那么 Node.js 就已经成功安装。</p><blockquote><p>Node.js 安装成功时也默认安装了 <code>npm</code>，在此后将会用到。<br><code>npm</code> 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。</p></blockquote><p>对了，国内使用 npm 可能很慢。</p><p><strong>你可以考虑切换为 <code>taobao</code> 镜像源。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.yuque.com/yunyoujun/notes/npm-and-yarn#nrm">npm &amp; yarn 常用包与命令</a></p></blockquote><hr><blockquote><p><a href="https://www.yarnpkg.com/zh-Hans/">yarn</a> 是 Facebook 出品的另一个包管理工具，同样可以管理 npm 中的包，安装已缓存的包时速度更快，你也可以使用它来替代 npm。</p></blockquote><p><a href="https://classic.yarnpkg.com/zh-Hans/docs/install#mac-stable">官网</a>下载或通过命令行安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><h3 id="Git-与-GitHub"><a href="#Git-与-GitHub" class="headerlink" title="Git 与 GitHub"></a>Git 与 GitHub</h3><h4 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h4><blockquote><p>Visual Studio Code，简称 VS Code。<br>目前最为强大易用的编辑器，轻量且快速。（<del>宇宙第一编辑器</del>）<br>注意：它并不是我们常常听到的 VS，VS 常常指的是 Visual Studio，是一个功能强大的 IDE（集成开发环境），体积也相比 VS Code 都要大上一个量级。</p></blockquote><p>在此之前，我建议你先安装 <a href="https://code.visualstudio.com/">VS Code</a>。因为安装 Git Bash 时，可以设置 VS Code 作为默认编辑器。</p><blockquote><p>Git 是一个开源的分布式版本控制系统，由 Linus Torvalds（同时也是 Linux 的作者）为了管理 Linux 开发而开发。<br>简而言之，是一个版本管理工具。譬如设计师设计好了第三版的海报，客户却说还是要第一版吧，这时便可以通过 Git 快速回退到最初的版本。<br>你只需要把每次更改的状态（Git 会自动进行检测，你只要掌握基础的几条命令就可以了）告诉 Git，而不需要每个版本都保存一份压缩包，既方便也能大大节约空间。<br>（当然这主要只对代码文本起作用，因为 Git 的本质是记录各行代码的增减，倘若是像视频、海报这类二进制文件来说便体现不出丝毫优势了。当然想要应对这种场景还有 <a href="https://git-lfs.github.com/">Git LFS</a>。）</p></blockquote><p>下载 <a href="https://git-scm.com/">Git</a> 并安装（如果国内速度太慢，可以试试<a href="https://pc.qq.com/detail/13/detail_22693.html">这里</a>）</p><p>macOS 用户可以下载官网的安装包进行安装，也可以直接安装 App Store 的 Xcode（附带会安装 Git，但是比较大）。</p><blockquote><p>类似的工具还有：SVN。但始终更推荐 Git，因为它功能更为强大且它的背后还有更强大的生态：GitHub。</p></blockquote><h4 id="注册-GitHub"><a href="#注册-GitHub" class="headerlink" title="注册 GitHub"></a>注册 GitHub</h4><p>这一部分内容，你也可以放到本地调试并预览成功后并打算线上部署的时候，再回过头来看。</p><blockquote><p>GitHub 一听便与 Git 有所渊源。<code>Git</code> 在英文中是懒人、饭桶之意。<code>Hub</code> 则是中心、集线器的意思。譬如 USB 集线器就是 USB Hub。所以 GitHub 就是饭桶中心（<del>大雾</del>）。<br>GitHub 是全世界最大的开源项目与代码托管平台，也是众多开发者的交流场所。<del>还是全球最大的同性交友网站</del>。<br>而代码托管本身用到的正是上文提到的 Git 技术。</p></blockquote><p>注册 <a href="https://github.com/">GitHub</a> 账号。（虽然都是英文，但不必畏惧，也并不会造成使用障碍，只要记得最常用的选项含义即可，以及善用手头的翻译软件。）</p><blockquote><p>注意：注册时的英文用户名将成为你可以使用的免费域名前缀。</p></blockquote><p>登录 GitHub。</p><blockquote><p>为什么要用 GitHub？<br>对于平民玩家来说，在初次尝试建立自己的网站时，也许并不会有闲钱或者说决心来购买自己的服务器与域名。<br>而 GitHub 则提供了 <a href="https://pages.github.com/">GitHub Pages</a> 这一服务。<br>用户们可以利用这一服务，部署自己的静态站点。</p></blockquote><p>点击右上角的 <code>+</code> -&gt; <code>New repository</code> 新建仓库。</p><p><img src="https://i.loli.net/2020/03/05/pDZtlgQsLTb9k13.png" alt="QQ20200305-221806@2x.png"></p><blockquote><p>我这里因为已经有同名仓库，所以提示了重复。</p></blockquote><p>仓库名称务必为 <code>你的用户名.github.io</code>，用户名是英文，大小写无所谓，但建议统一小写。（因为你会发现时常切换大小写很麻烦）</p><blockquote><p>为什么必须这个作为仓库名？<br>GitHub Pages 服务的命名规范，同时它也将成为你的专属域名。当然，你也可以购置自己的专属域名并用它来提供内容。</p></blockquote><p>点击 <code>Create repository</code>。</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p><a href="https://hexo.io/">Hexo</a></p><ul><li>GitHub: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></li><li><a href="https://hexo.io/zh-cn/docs/index.html">官方文档</a>（直接参考文档也是一个不错的选择）</li></ul><blockquote><p><strong>为嘛使用 Hexo ？</strong><br>Hexo 是一个快速、简洁而强大的博客框架，基于 Node.js，同样托管于 GitHub 之上。生态中拥有众多插件主题。你可以基于它快速生成一些静态页面。<br>你可以使用别人的各种主题与插件，也可以自己定制开发想要的功能。<br><strong>为什么不是…?</strong><br>其他常用的博客框架还有 <a href="https://wordpress.org/">WordPress</a>，<a href="https://typecho.org/">Typecho</a>，<a href="https://ghost.org/">Ghost</a> 等，但这些往往都需要购置自己的服务器，而无法静态化地部署到 GitHub Pages 上。（当然，相应的功能和灵活性也大大提升。）静态化站点还有一个优势就是访问速度往往更快。<br>静态网站生成器还有 <a href="https://vuepress.vuejs.org/">Vuepress</a>，<a href="https://www.gatsbyjs.org/">Gatsby</a> 等。但这些多是为了写文档而量身定制的，你也可以使用它们，但是相较 Hexo 的博客定位，它们关于博客的插件和主题以及解决办法会少得多。<br>Hexo 提供的功能与 <a href="https://gohugo.io/">Hugo</a> 几乎都有，（生成大量文件时，甚至比 Hexo 更快）不过它是基于 GO 语言。日后你想对自己的网站进行自定义，即便是 Hugo，你编写前端的交互仍旧需要使用 JavaScript，所以选择基于 JavaScript 的 Hexo 可以降低学习成本。（你若对 GO 有兴趣，仍然可以尝试使用 Hugo，但本教程将不会针对 Hugo 进行展开。）<br>所以对于新手来说，使用 Hexo 作为起始点，不失为一个好选择。（当然如果你有钱租服务器，并希望快速上手的话，就可以考虑考虑 WordPress 或者 Typecho）<br>这里顺带推荐一下小伙伴 <a href="https://asuhe.jp/">染川瞳</a> 的 WordPress 主题 <a href="https://github.com/mirai-mamori/Sakurairo">Sakurairo</a>，<a href="https://guhub.cn/">阔落</a> 的 Typecho 主题 <a href="https://github.com/BigCoke233/miracles">miracles</a>，都是很漂亮的主题。</p></blockquote><p>在终端中输入以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="comment"># 如果安装失败，可能是没有权限，可以尝试头部加上 sudo 重新执行</span></span><br><span class="line"><span class="comment"># sudo npm install hexo-cli -g</span></span><br></pre></td></tr></table></figure><blockquote><p><code>install</code> 自然是安装。<br><code>hexo-cli</code> 则是 <code>hexo</code> 的终端工具，可以帮助你生成一些模版文件，之后再用到。<br><code>-g</code> 代表的是全局安装。也就是在任何地方都可以使用，否则会只能在安装的目录下使用。</p></blockquote><p>此时，请先通过 <code>cd</code> 进入你本地电脑打算存储网站代码的文件夹目录。（或者右键文件夹 Git Bash Here）</p><blockquote><p><a href="https://baike.baidu.com/item/cd/3516393">cd | DOS 命令</a><br><a href="https://baike.baidu.com/item/cd/3516411">cd （LINUXSHELL 命令）</a></p></blockquote><p>譬如：</p><blockquote><p>注意：这里是你自定义的目录，请不要复制粘贴</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#x27;#&#x27; 字符后的文字代表注释，不需要输入</span></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line"><span class="built_in">cd</span> C:\Users\YunYou\Documents\GitHub\</span><br><span class="line"><span class="comment"># macOS</span></span><br><span class="line"><span class="comment"># cd /Users/yunyou/github/</span></span><br></pre></td></tr></table></figure><p>接下来输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 你的名字.github.io</span><br></pre></td></tr></table></figure><blockquote><p><code>hexo</code> 正是因为我们之前安装了 <code>hexo-cli</code> 这一个包，所以我们可以在终端中使用 <code>hexo</code> 这一命令。<br><code>init</code> 初始化博客的模版文件。后面跟的是你要新建的文件夹，最好和你此前新建的仓库名一致。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入你的博客文件夹</span></span><br><span class="line"><span class="built_in">cd</span> 你的名字.github.io</span><br><span class="line"><span class="comment"># 默认安装所有 `package.json` 文件中提到的包</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 你也可以缩写成 hexo s</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><code>server</code> 代表开启本地的 Hexo 服务器，这时你就可以打开浏览器，在地址栏中输入 <code>localhost:4000</code> 就可以看到本地的网页了。</p><p>按 <code>Ctrl + C</code> 中断服务器的运行。</p><p>至此，基础的模版页面便已经搭建好了。</p><h4 id="使用-Hexo-主题"><a href="#使用-Hexo-主题" class="headerlink" title="使用 Hexo 主题"></a>使用 Hexo 主题</h4><p>Hexo 默认提供的是 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题。<br>默认主题样式简单，功能较少。所以大多数人并不会使用默认主题。</p><p>这里将示范如何使用我自己开发的主题 <a href="https://github.com/YunYouJun/hexo-theme-yun">hexo-theme-yun</a>。</p><p><a href="https://github.com/YunYouJun/hexo-theme-yun"><img src="https://img.shields.io/github/stars/YunYouJun/hexo-theme-yun?style=social" alt="GitHub stars"></a></p><blockquote><p><em>(:з」∠)</em> 顺带求 Star，代表收藏，就在点进链接后的右上角。</p></blockquote><p>你可以前往 <a href="https://www.yunyoujun.cn/">云游君的小站</a> 查看示例效果。</p><p>Hexo-Theme-Yun 的速度检测</p><p><img src="https://i.loli.net/2020/03/12/cUIuDPJfo379ZOk.png" alt="pagespeed-insights-score.png"><em>谷歌 <a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed Insights</a></em></p><p><img src="https://i.loli.net/2020/03/08/DhfLu5yngb7NZE2.png" alt="Audits - Lighthouse"><em>谷歌浏览器 Audits - Lighthouse 检测分数</em></p><p>当然，你也可以在 <a href="https://hexo.io/themes/">Themes | Hexo</a> 发现更多有趣美丽的主题。使用方法大致相同。<br>当你具备一定开发能力时，你可以开发属于自己的主题，或者为 hexo-theme-yun 提交 <a href="https://github.com/YunYouJun/hexo-theme-yun/pulls">PR</a> 添加你想要的功能。</p><ul><li><a href="https://github.com/YunYouJun/hexo-theme-yun">hexo-theme-yun - GitHub</a></li><li><a href="https://yun.yunyoujun.cn/">hexo-theme-yun 使用文档</a>：更详细的配置进阶指南。</li><li><a href="https://www.yunyoujun.cn/">示例效果</a></li></ul><h5 id="下载-Hexo-主题"><a href="#下载-Hexo-主题" class="headerlink" title="下载 Hexo 主题"></a>下载 Hexo 主题</h5><p>进入终端（确保路径处于你此前使用 Hexo 初始化好的文件夹目录下，即 <code>xxx.github.io</code>，后简称为 <code>Hexo 目录</code>），输入以下命令。</p><blockquote><p>实际上你也可以直接在 VS Code 中使用终端。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/YunYouJun/hexo-theme-yun themes/yun</span><br></pre></td></tr></table></figure><blockquote><p>这里便使用到了我们此前安装的 Git，<code>git clone</code> 即代表克隆（也就是复制的作用）我的主题（托管于 GitHub，链接便是主题所在的地址），<code>themes/yun</code> 则代表放在你 Hexo 文件夹下的 <code>themes/yun</code> 文件夹里（没有该文件夹会自动新建）。</p></blockquote><h5 id="编辑-Hexo-配置"><a href="#编辑-Hexo-配置" class="headerlink" title="编辑 Hexo 配置"></a>编辑 Hexo 配置</h5><blockquote><p>右键文件夹使用 VS Code 打开，或者进入 VS Code 打开你存储网站的文件夹。此后操作都将默认你已处于该工作目录下。</p></blockquote><p>在你此前通过 Hexo 初始化生成的文件目录下，会存在一个 <code>_config.yml</code> 文件。</p><blockquote><p><code>yml</code> 是 <a href="https://baike.baidu.com/item/YAML/1067697">YAML</a> 文件的后缀名，YAML 是 “YAML Ain’t a Markup Language”（YAML 不是一种标记语言） 的缩写，但它实际上还是一种标记语言。你可以将其理解为存储数据的一种文本格式，这也是其诞生的目的。 如果你听说过 JSON，那你就更能明白它是干什么的了。</p></blockquote><p>它是 Hexo 的配置文件，关于各配置选项的意义你可以查看 <a href="https://hexo.io/zh-cn/docs/configuration">配置 | Hexo</a>。</p><p>在 <code>_config.yml</code> 中找到 <code>theme</code> 这个字段，将其后的 <code>landscape</code> 修改为 <code>yun</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">yun</span></span><br></pre></td></tr></table></figure><blockquote><p>pug 是一种模板引擎，可以渲染为 HTML 字符串。类似的还有 ejs，swig 等，语法和设计理念有所不同。<br>stylus 是一种 CSS 预处理器，可以渲染为 CSS。类似的还有 scss，less，同样只是语法和设计理念有所差异。</p></blockquote><p>由于我的主题使用了 pug 和 stylus，而 Hexo 自带的一般是 ejs 与 stylus，所以你可能还需要输入以下命令安装渲染器。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-render-pug hexo-renderer-stylus</span><br><span class="line"><span class="comment"># 如果出问题，可以换 yarn 安装试试。</span></span><br></pre></td></tr></table></figure><p>这时再像此前那般使用 <code>hexo server</code> 重新启动服务器，你就可以看到一个不一样的主题风格的页面了。</p><h5 id="自定义主题配置"><a href="#自定义主题配置" class="headerlink" title="自定义主题配置"></a>自定义主题配置</h5><p>当启动时，会使用主题的默认配置。但这不一定是你想要的。<br>所以你可以对主题进行一些自定义。</p><p>主题的配置文件放在 <code>themes/yun/_config.yml</code> 文件中。<br>且慢，你<strong>最好不要直接修改主题的默认配置</strong>。倘若日后主题升级更新了怎么办，难道还要重新配置一遍吗？</p><p>最好的解决方案就是在博客根目录下（不是主题目录）新建 <code>source/_data/yun.yml</code>。（若 <code>source/_data</code> 目录不存在，请新建）</p><p>本主题将自定义配置与默认配置进行合并，因此你只需要在 <code>yun.yml</code> 文件中自定义你需要的配置即可，其余仍将自动采用默认配置。</p><p>譬如我们需要更换头像。在 <code>yun.yml</code> 中填写。</p><blockquote><p>你可以在 <code>source</code> 文件夹下新建 <code>images</code> 文件夹，用来存储你的图片。<br>也可以使用 <a href="https://sm.ms/">SM.MS</a> 等图床工具配合 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a> 上传你的图片文件，获取在线链接。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span> <span class="comment"># 你的头像图片地址</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>更换主题色彩，比如换成黑色，黑色的十六进制颜色代码是 <code>#000000</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">colors:</span></span><br><span class="line">  <span class="attr">primary:</span> <span class="string">&quot;#000000&quot;</span></span><br></pre></td></tr></table></figure><p>这时你的主题色调就会变为黑色。</p><p>这只是一个配置项的简单示例，更多配置你可以参考 <a href="https://yun.yunyoujun.cn/">Yun 主题文档</a> 或直接在 <code>theme/yun/_config.yml</code> 中查看，并根据自己的需要进行配置。</p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>至今我们的工作都是在本地进行，想必你也很想放到线上与小伙伴们分享。<br>这便轮到了 GitHub Pages 的出场，不过 GitHub Pages 只支持纯静态文件。</p><p>所以我们需要使用以下命令先来生成站点的静态文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果进行多次生成，为了避免受错误缓存影响，最好使用 hexo clean 先清除一遍。</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 缩写为 hexo g</span></span><br></pre></td></tr></table></figure><p>此时你的文件夹目录下会出现 <code>public</code> 这个文件夹，里面存放的就是你站点的静态文件。</p><h3 id="与远程仓库建立关联"><a href="#与远程仓库建立关联" class="headerlink" title="与远程仓库建立关联"></a>与远程仓库建立关联</h3><p>接下来我们将本地的仓库与此前在 GitHub 上建立的仓库建立关联。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment"># 初始化 Git 仓库，只需要执行一次即可</span></span><br></pre></td></tr></table></figure><p>在将其部署到 GitHub Pages 上之前，我们最好先建立一个分支。</p><blockquote><p>什么是分支？<br>Git 提供了版本管理功能，其中还有一个分支功能，你现在可以简单地将其理解为平行世界。</p></blockquote><p><code>你的名字.github.io</code> 部署后，GitHub Pages 将默认使用你的 master 分支作为静态文件部署。<br>所以我们最好新建一个 hexo 分支（命名无所谓）用来存储 Hexo 地源代码，master 分支则用来存储部署后的静态文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure><p>这时便成功建立了一个 hexo 分支。（此后的工作都将在 hexo 分支下进行）</p><p>你可以通过 <code>git branch -v</code> 来查看当前有哪些分支，使用 <code>git checkout 分支名</code> 来切换到对应的分支。</p><blockquote><p><a href="https://www.yunyoujun.cn/note/git-learn-note/">Git 学习笔记</a></p></blockquote><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>为了更方便的部署到 GitHub Pages，Hexo 提供了 <code>hexo-deployer-git</code> 插件。</p><p>老规矩，安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>在 <code>_config.yml</code> 中配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">你此前新建的仓库的链接</span> <span class="comment"># 比如：https://github.com/YunYouJun/yunyoujun.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment"># 默认使用 master 分支</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">Update</span> <span class="string">Hexo</span> <span class="string">Static</span> <span class="string">Content</span> <span class="comment"># 你可以自定义此次部署更新的说明</span></span><br></pre></td></tr></table></figure><p>保存，部署！</p><blockquote><p>第一次可能需要你输入用户名与密码。<br>密码输入的时候不会出现 ***，不要害怕，已经输入进去了。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>等待完成后，打开网址 <code>https://你的名字.github.io</code> 就能看到你的线上网站了。</p><blockquote><p>使用 https，http 可能无法正常打开。HTTPS 是多了安全加密的 HTTP，Chrome 浏览器已经默认会显示 <code>http</code> 链接为不安全。<br>为了安全，建议开启强制 https 跳转。<code>项目地址页面 -&gt; Settings -&gt; Options -&gt; GitHub Pages -&gt; Enforce HTTPS</code>。（翻到下面）<br>此时，http 网址会自动重定向到 https</p></blockquote><h3 id="备份与自动部署"><a href="#备份与自动部署" class="headerlink" title="备份与自动部署"></a>备份与自动部署</h3><p>我们当前只是将生成的静态文件部署到了云端。</p><p>为了以防万一，我们应该将网站的源代码文件也推送到 GitHub 仓库备份。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 与远程 Git 仓库建立连接，只此一次即可</span></span><br><span class="line">git remote add origin https://github.com/你的用户名/你的名字.github.io</span><br></pre></td></tr></table></figure><p>接下来准备提交，这几句命令将是你以后每次备份所需要输入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加到缓存区</span></span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&quot;这次做了什么更改，简单描述下即可&quot;</span></span><br><span class="line"><span class="comment"># 推送至远程仓库</span></span><br><span class="line">git push</span><br><span class="line"><span class="comment"># 第一次提交，你可能需设置一下默认提交分支</span></span><br><span class="line"><span class="comment"># git push --set-upstream origin hexo</span></span><br></pre></td></tr></table></figure><p>每次推送都要输入这三条命令，你可能觉得有些麻烦。<br>那么你可以编写 bash 脚本。</p><p>譬如，在根目录下新建 <code>update.sh</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果没有消息后缀，默认提交信息为 `:pencil: update content`</span></span><br><span class="line">info=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> [<span class="string">&quot;<span class="variable">$info</span>&quot;</span> = <span class="string">&quot;&quot;</span>];</span><br><span class="line"><span class="keyword">then</span> info=<span class="string">&quot;:pencil: update content&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&quot;<span class="variable">$info</span>&quot;</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><p>此后更新的话，只需要在终端执行 <code>sh update.sh</code> 即可。</p><p>更新麻烦，每次部署也很麻烦，可以使用持续集成进行自动部署。</p><blockquote><p>什么是持续集成？<br>持续集成是一种软件开发实践。对软件进行自动化构建，以此来发现错误。<br>Travis CI 就是一个线上持续集成服务的提供商。它可以拉取你每次推送到 GitHub 上的代码，然后根据你的要求对其进行构建。<br>我们可以趁机让它自动生成网站静态文件，然后自动帮我们部署。<br>除此之外，你还可以使用 <a href="https://help.github.com/en/actions/getting-started-with-github-actions/about-github-actions">GitHub Actions</a> ，<a href="https://www.netlify.com/">Netlify</a> 等服务。<br>GitHub Actions 相比 Travis 等，自身便拥有仓库的 Token，不再需要额外设置，可以直接使用 <code>secrets.GITHUB_TOKEN</code>。<br>推荐一个专门用来部署 gh-pages 的 Actions <a href="https://github.com/peaceiris/actions-gh-pages">actions-gh-pages</a></p></blockquote><p>关于更多更具体的自动化部署方案和操作步骤，你可以参考我的小伙伴 ChrAlpha 的 <a href="https://blog.ichr.me/post/automated-deployment-of-serverless-static-blog/">初探无后端静态博客自动化部署方案</a>。</p><p>他在文章中详细介绍了 Netlify 、GitHub Actions 和 Travis CI 的部署方法。</p><p>你也可以参考 Hexo 的官方文档 <a href="https://hexo.io/zh-cn/docs/github-pages">将 Hexo 部署到 GitHub Pages</a></p><p>我就不在此画蛇添足。</p><hr><p>当然还有个更简便的方法，直接参考我的 <a href="https://github.com/YunYouJun/yunyoujun.github.io/blob/hexo/.github/workflows/gh-pages.yml">gh-pages.yml</a>。</p><p>去掉夹在 <code>yarn install</code> 与 <code>yarn build</code> 之间的 <code>algolia</code> 部分，直接粘贴到你的 <code>.github/workflows/</code> 文件夹（自己新建）下 <code>xxx.yml</code> 文件里即可。</p><p>推送后便可直接自动部署。</p><p>至此，你的站点便基本搭建完成，此后继续对主题进行自定义吧。</p><blockquote><p><a href="https://yun.yunyoujun.cn/">Yun 主题文档</a></p></blockquote><h3 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h3><h4 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h4><p>输入以下命令即可新建 <code>xxx.md</code> 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post xxx</span><br></pre></td></tr></table></figure><blockquote><p><code>md</code> 是 <code>Markdown</code> 的后缀名，是一种简洁方便的文本标记语言。你只需要记住简单的几种语法，就可以快速进行编写。<br>为什么使用 Markdown？<br>首先 Hexo 本身就是将 Markdown 转化为静态的 Html 文件，来方便用户编写文章。<br>Markdown 就好似介于 Word 与 TXT 文本之间。Word 体积大、大部分功能实际上根本用不到，且最后的文档常常带有许多冗余信息。<br>而 TXT 却无法实现加粗、标题、下划线、水平分割线等常用的功能。<br>（这里所说的 TXT 只是一种纯文本格式的代称，实际上 Markdown 也是纯文本文件，不过通过语法和 Markdown 编译器，我们就可以看到一些简单的样式。）</p></blockquote><p>譬如本文就是通过 Markdown 编写。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**加粗文字**</span></span><br></pre></td></tr></table></figure><blockquote><p>更多语法（虽然说是更多，但是其实也没多少）：<a href="https://github.com/younghz/Markdown">Markdown 基本语法</a></p></blockquote><p>这是我写的一个 Markdown 样式：<a href="https://www.yunyoujun.cn/star-markdown-css/">star-markdown-css</a></p><p>上面是渲染过后的效果，你可以与其 Markdown 的<a href="https://raw.githubusercontent.com/YunYouJun/star-markdown-css/master/demo/md/demo.md">纯文本原文</a>进行对比。</p><h5 id="添加标签-分类"><a href="#添加标签-分类" class="headerlink" title="添加标签/分类"></a>添加标签/分类</h5><p>例如本文 Markdown 的头部。</p><blockquote><p><a href="https://hexo.io/zh-cn/docs/front-matter.html">Front-matter</a></p></blockquote><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 教你如何从零开始搭建一个属于自己的网站</span><br><span class="line">date: 2020-03-05 01:31:08</span><br><span class="line">updated: 2020-07-14 16:31:00</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> 教程</span><br><span class="line"><span class="bullet">  -</span> Hexo</span><br><span class="line"><span class="bullet">  -</span> 分享</span><br><span class="line">categories:</span><br><span class="line"><span class="section">  - 云游的小安利</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">你的文章内容</span><br></pre></td></tr></table></figure><h4 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h4><p>你可以新建一些自己的自定义页面。</p><p>譬如直接在 Hexo 目录下的 <code>source</code> 文件夹下直接新建 HTML 进行编写。</p><p>也可以通过以下命令来新建页面。（当然还是 Markdown，不过也是可以在 Markdown 里写 HTML 的，也会被渲染出来。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page xxx</span><br></pre></td></tr></table></figure><p>说到这里，就不得不提一提本主题的特色功能了。</p><p>生成你的老婆列表页面。按一定格式书写即可。见<a href="https://yun.yunyoujun.cn/guide/page.html#girls">文档</a>。</p><blockquote><p>预览：<a href="https://www.yunyoujun.cn/girls/">Lovely Girls</a></p></blockquote><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="视频？"><a href="#视频？" class="headerlink" title="视频？"></a>视频？</h3><p>没有视频，一是懒，二是文字更利于更新勘误。</p><p>以及文章中将会频繁出现参考链接，更方便使用。</p><h3 id="如何绑定你的自定义域名？"><a href="#如何绑定你的自定义域名？" class="headerlink" title="如何绑定你的自定义域名？"></a>如何绑定你的自定义域名？</h3><p>首先，你得有个自己的域名。</p><blockquote><p>避免广告嫌疑，你可以自行前往相关域名提供商购买。<br><del>但是如果你有幸能看到谷歌广告（概率较小），可以考虑点一点。</del></p></blockquote><p>并使用 CNAME 解析到 <code>你的名字.github.io</code>。（当然 A 记录直接解析到 GitHub Pages IP 地址也可以。）</p><blockquote><p><a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">Managing a custom domain for your GitHub Pages site</a></p></blockquote><p>在 <code>Hexo</code> 工作目录下 <code>source</code> 文件夹下新建 <code>CNAME</code> 文件（没有后缀名）。</p><blockquote><p>CNAME 即相当于告诉 GitHub 允许将 xxx.github.io 为你的域名提供服务。<br>source 目录下的文件除了特殊的 markdown 会被解析为 html，其余都会原样复制到生成的静态文件夹中。<br>所以你需要在 source 文件夹下建有 CNAME，它会在生成静态文件时，将 CNAME 拷贝到静态文件夹并部署到 master 分支。<br>如果只是在 GitHub 上设置（<code>项目地址页面 -&gt; Settings -&gt; Options -&gt; GitHub Pages -&gt; Custom domain</code>），它会自动添加到 master 分支上，但随后不包含 CNAME 的部署会将其覆盖。</p></blockquote><p>内容填写你的域名即可。</p><blockquote><p><a href="https://help.github.com/en/github/working-with-github-pages/about-custom-domains-and-github-pages">About custom domains and GitHub Pages</a></p></blockquote><h3 id="备案"><a href="#备案" class="headerlink" title="备案"></a>备案</h3><p>如果想要使用国内的一些服务，比如 CDN，不备案确实寸步难行。</p><p>此处我指的是 ICP 备案，并非公安备案。（实际上我从来没有进行过公安备案，且目前在使用服务时，并未受到任何相关限制。）</p><blockquote><p>我只在腾讯云备案过，所以只能分享一点此方面的经验。</p></blockquote><p>国内备案往往意味着你还需要一台国内的服务器，譬如通过腾讯云备案时会需要你设置关联的服务器（阿里云应当也是如此）。<br>实际上你的网站并不一定得在这台服务器上，即便你只是免费试用了一个月，但是备案成功了，之后过期了对备案也不会有何影响。</p><blockquote><p>也就是说你完全可以使用学生优惠（10 元左右）购买一个月的云服务器，用于关联，并在这个月内抓紧备案好，此后云服务器过期不会影响备案问题。<br>学生优惠的话 <a href="https://www.aliyun.com/minisite/goods?userCode=ixykjqj2">阿里云</a> 或者 <a href="https://url.cn/PLQYbz6n">腾讯云</a> 都有。</p></blockquote><p>备案前需要注意的几点就是：</p><ul><li>确定你的域名是否可以备案（一些少见/独特的域名后缀，国内是无法备案的，比如 <code>moe</code>）</li><li>关闭评论区</li><li>提交备案时的备注说明不得含有 <code>交流</code> 字样</li><li>首页不能含有其他网站的直达链接</li><li>遵纪守法无不良信息（这是当然的）</li></ul><p>你也可以直接关停网站，等待备案成功后再重新打开。（今后每年偶尔会复查，但相对会宽松许多。）</p><p>此后，按照网站指引的备案步骤一步步来即可。（以前还要等待幕布寄送拍照，现在可以直接在手机上人脸验证）</p><p>备案成功后页脚必须清晰地展示备案号，且备案号含有指向 <a href="http://www.beian.miit.gov.cn/">http://www.beian.miit.gov.cn/</a> 的超链接。</p><h3 id="更多可能有帮助的内容"><a href="#更多可能有帮助的内容" class="headerlink" title="更多可能有帮助的内容"></a>更多可能有帮助的内容</h3><ul><li><a href="https://www.yunyoujun.cn/note/baidu-seo-about-github-pages/">让百度收录你的 GitHub Pages 博客 - 云游君的小站</a></li><li><a href="https://www.yunyoujun.cn/note/use-cdn-speed-up-site/">使用 CDN 加速你的 GitHub Pages 网站 - 云游君的小站</a></li></ul><h3 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a>其他平台</h3><p>毕竟自己的站点可能还是不会有什么人看，所以发到其他平台了（然而还是没有人）。不过在<a href="https://www.yunyoujun.cn/share/how-to-build-your-site/">这里</a>阅读体验应该是最好的。</p><ul><li><a href="https://zhuanlan.zhihu.com/p/113209647">教你如何从零开始搭建一个属于自己的网站 - 云游君的文章 - 知乎</a></li><li><a href="https://www.bilibili.com/read/cv5108842">教你如何从零开始搭建一个属于自己的网站 - bilibili 专栏</a>（不支持外链、代码高亮、Markdown，太难了）</li><li><a href="https://cloud.tencent.com/developer/article/1609701">教你如何从零开始搭建一个属于自己的网站 - 腾讯云</a>（该说不愧是腾讯吗？SEO 绝了。最晚（晚了几个星期）发的，次日搜全名就变百度第一条了。）</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>个人网站同样可以用来做许多事情，你可以将其用来记录生活、回忆、创作、学习笔记、开发经验等（包括作为一个试验平台）。<br>可以与熟悉的人分享，也可以作为另一个世界另一个自己的展示。</p><p>多年后，回看起自己当初写下的内容，未尝不是件有趣的事情。</p><p>善始者众，善终者寡。</p><blockquote><p>臣闻善作者，不必善成；善始者，不必善终。「史记·乐毅列传」</p></blockquote><p>希望大家能有毅力坚持下去，不忘初心。</p><blockquote><p>永远相信美好的事情即将发生</p></blockquote><p>相关讨论与问题，可前往 <a href="https://github.com/YunYouJun/hexo-theme-yun/discussions/categories/q-a">Discussions</a> 反馈。</p><blockquote><p>主题相关问题请到 <a href="https://github.com/YunYouJun/hexo-theme-yun/issues">Issues ｜ hexo-theme-yun</a> 反馈。</p></blockquote><hr><p>​                                                                                                                                    by.yunyoujun</p><p>​                                                                                                                                    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;写给想要拥有一个自己的网站但没有资金成本的小白与曾经的自己。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽说是网站</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>音频测试</title>
    <link href="http://example.com/2021/10/10/%E9%9F%B3%E9%A2%91%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2021/10/10/%E9%9F%B3%E9%A2%91%E6%B5%8B%E8%AF%95/</id>
    <published>2021-10-10T07:45:17.620Z</published>
    <updated>2021-10-10T08:12:55.110Z</updated>
    
    <content type="html"><![CDATA[<p>​<audio id="audio" controls="" preload="none"><br>      <source id="mp3" src="https://m701.music.126.net/20211010163647/37de4cfbaec7c1e58cfa840005f31a22/jdyyaac/075e/525f/565b/04961854cde5431795e6a16c4eaddbf7.m4a"><br></audio></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=30245064&auto=1&height=66"></iframe><p>zhimaoi:<a href="http://www.zhimaoi.cn/blogof/jason">戳这里</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​&lt;audio id=&quot;audio&quot; controls=&quot;&quot; preload=&quot;none&quot;&gt;&lt;br&gt;      &lt;source id=&quot;mp3&quot; src=&quot;https://m701.music.126.net/20211010163647/37de4cfbaec7c1e58</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何在微软官网获取Windows11镜像</title>
    <link href="http://example.com/2021/10/10/win11/"/>
    <id>http://example.com/2021/10/10/win11/</id>
    <published>2021-10-10T06:18:58.042Z</published>
    <updated>2021-10-10T06:48:29.468Z</updated>
    
    <content type="html"><![CDATA[<p>示例视频：<a href="https://wus-streaming-video-rt-microsoft-com.akamaized.net/d271ec57-5cdd-465e-97ec-bdc039372c50/7cc0686b-1d39-495e-b0be-b5554d944fe6.mp4">戳这里</a></p><p><del>准备Windows10养老</del>（doge）</p><p>下载地址：<a href="https://www.microsoft.com/zh-cn/software-download/windows11">戳这里</a></p><p>如果你是Windows10用户<br>建议你下载<strong>电脑状况检查应用</strong><br>下载地址：<a href="https://aka.ms/GetPCHealthCheckApp">戳这里</a></p><p><img src="https://i.loli.net/2021/10/10/bjGmKEBzRdXrH79.png" alt="下载Windows11"></p><p>点：<strong>立即检查</strong></p><p>跳出这张图片就说明可以安装</p><p><img src="https://i.loli.net/2021/10/10/xR2Jwr9OPS3IdLQ.png" alt="成功"></p><p>有兴趣的小伙伴可以试试</p><p><del>我不安装</del></p><p>zhimaoi<a href="http://www.zhimaoi.cn/blogof/jason">戳这里</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;示例视频：&lt;a href=&quot;https://wus-streaming-video-rt-microsoft-com.akamaized.net/d271ec57-5cdd-465e-97ec-bdc039372c50/7cc0686b-1d39-495e-b0be-b55</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>用代码关闭极域电子教室</title>
    <link href="http://example.com/2021/10/09/%E5%86%8D%E8%A7%81%E6%9E%81%E5%9F%9F/"/>
    <id>http://example.com/2021/10/09/%E5%86%8D%E8%A7%81%E6%9E%81%E5%9F%9F/</id>
    <published>2021-10-09T13:59:12.016Z</published>
    <updated>2021-10-10T06:11:33.898Z</updated>
    
    <content type="html"><![CDATA[<p><del>极域电子教室的困扰影响着很多小学僧</del><br>下面我们一步解决！<br><strong>首先你得会用</strong> <em>cmd</em><br>按下一组快捷键：<br><code>win+r</code><br>在对话框里<br><img src="https://i.loli.net/2021/10/09/dsNPnGWjVT7XgQq.png" alt="对话框"><br>输入：cmd<br><strong>按回车</strong><br>弹出这样的窗口：<br><img src="https://i.loli.net/2021/10/09/SHwXqKrA5OMcuBh.png" alt="cmd"><br>里面输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill -f -im studentmain.exe</span><br></pre></td></tr></table></figure><p>这样就好了！！！<br>原理是：<br>用taskkill来结束<br>极域<strong>学生端</strong><br>的<code>.exe</code>程序<br>好好学习吧！<br>zhimaoi博客：<a href="http://www.zhimaoi.cn/blogof/jason">戳这里</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;del&gt;极域电子教室的困扰影响着很多小学僧&lt;/del&gt;&lt;br&gt;下面我们一步解决！&lt;br&gt;&lt;strong&gt;首先你得会用&lt;/strong&gt; &lt;em&gt;cmd&lt;/em&gt;&lt;br&gt;按下一组快捷键：&lt;br&gt;&lt;code&gt;win+r&lt;/code&gt;&lt;br&gt;在对话框里&lt;br&gt;&lt;img src=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MarkDown基本语法阐述</title>
    <link href="http://example.com/2021/10/09/MarkDown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2021/10/09/MarkDown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2021-10-09T13:13:49.535Z</published>
    <updated>2021-10-09T13:17:22.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote><h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown<em>是什么</em>？</h4><h4 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h4><h4 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h4><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><em>怎么</em>使用？</h4><h4 id="谁在用？"><a href="#谁在用？" class="headerlink" title="谁在用？"></a><em>谁</em>在用？</h4><h4 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h4></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p><h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p><p>他有着足以让你跪拜的人生经历：    </p><ul><li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li><li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li><li><strong>2005</strong>年创建<a href="http://infogami.org/">Infogami</a>，之后与<a href="http://www.reddit.com/">Reddit</a>合并成为其合伙人。   </li><li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li><li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li><li><strong>2013</strong>年1月自杀身亡。    </li></ul><p><img src="https://i.loli.net/2021/10/09/DAgEbN2Zx96e8JS.jpg" alt="Aaron Swartz"></p><p>天才都有早逝的归途。</p><h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h3><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p><p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，**反斜杠 <code>\</code><strong>，</strong>符号’`’**。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p><p>代码区块：</p><pre><code>void main()&#123;    printf(&quot;Hello, Markdown.&quot;);&#125;</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code>    </p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul><li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错   </li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。    </li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><hr><p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><hr><p>以上基本是所有traditonal markdown的语法。</p><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="Markdown">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="Markdown">https://github.com/younghz/Markdown</a></td></tr></tbody></table><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h2&gt;&lt;blockquote&gt;
&lt;h4 id=&quot;Markdown是什么？&quot;&gt;&lt;a href=&quot;#Markdown是什么？&quot; class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>有关oj运行机制的一点解释（持续更新。。。）</title>
    <link href="http://example.com/2021/10/06/OJ/"/>
    <id>http://example.com/2021/10/06/OJ/</id>
    <published>2021-10-06T11:14:17.539Z</published>
    <updated>2021-10-06T11:44:15.348Z</updated>
    
    <content type="html"><![CDATA[<p><strong>很久以前就想专门写篇有关oj原理的博客了<br>因为之前对电脑判题的原理有过质疑<br>于是在极长的一段时间内妄想在网络上找到相关的解答<br>后来在问老师问同学问博主问度娘一点一点解惑<br>慢慢总结后<br>大致覆盖了我目前的一些疑惑</strong></p><h2 id="首先是有关在线评测系统运行原理及各种报错常因"><a href="#首先是有关在线评测系统运行原理及各种报错常因" class="headerlink" title="首先是有关在线评测系统运行原理及各种报错常因"></a>首先是有关在线评测系统运行原理及各种报错常因</h2><p><strong>其实不难想象，电脑只是处理数据验证最后答案与期望答案是否相同，大部分的思考都由人来完成</strong></p><p>oj一般有一组input文件和一组output文件，</p><p>先运行你的程序，同时在后台开始计时，</p><p><strong>无法通过编译的是CE，<br>编译时开的内存过大时MLE，然后开始运行，</strong></p><p>将所有input数据加入输入流中（数据量可能很大，几百万组什么的）</p><p>在这种大数据下除非你的程序是完美的，否则不可能通过。</p><p>将输出的内容和output文件比对，</p><p><strong>不完全一样的WA，<br>数据一样当差换行和空格时是PE，<br>若在计时器计时结束前你的程序未能和output匹配完成（已完成部分都正确）是TLE，<br>输出流没有正常结束是OLE，<br>运行时调用了非法地址时是RE，</strong></p><h2 id="然后就是有关打榜时的要项"><a href="#然后就是有关打榜时的要项" class="headerlink" title="然后就是有关打榜时的要项"></a>然后就是有关打榜时的要项</h2><p>在正式比赛中input包括两部分，</p><p>一部分是出题人这对这道题可能的算法出的边缘数据，运算量最大的数据，特殊数据，</p><p>另一部分是大数据，就是随机生成大量的合法数据，将数据通过标程给出结果。</p><p>这两部分数据结合可以以极高的准确率判定提交的程序是否正确</p><p>在正式比赛中依然有裁判组，</p><p>他们只对ac率和预先估计相差极大的情况进行观察，</p><p>必要时重写oj，进行rejudge，</p><p><strong>同时选手也可以申请裁判关注（裁判只对真正误判的情况回应），<br>你所想的由专家手动判题的情况是不存在的。<br>因为判题必须在极短时间完成。</strong></p><p>但是好多网络赛中及时向出题人反映的情况却不少见</p><h2 id="最后就是有关ac样例的疑点"><a href="#最后就是有关ac样例的疑点" class="headerlink" title="最后就是有关ac样例的疑点"></a>最后就是有关ac样例的疑点</h2><p>仅仅是通过了样例的程序远远不能ac，</p><p>样例只是帮助你理解题意而已，</p><p>通常样例无法检测出程序的错误。</p><p><strong>甚至有些样例是有误导性质的，</strong></p><p>要走的路还很远</p><p>acm的题意描述通常是很严谨的，</p><p>在题意允许的范围的数据都可能出现，</p><p><strong>特殊情况很多题目里还没说如何处理的情况几乎不存在。</strong></p><p>题没过检查一下，看看disguss，</p><p>看看别人的解题报告什么的，有些东西做多了就理解了，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello world!</span><br></pre></td></tr></table></figure><p>个人博客（zhimaoi）<a href="http://www.zhimaoi.cn/blogof/jason">戳这里</a></p><p>个人博客（网站）<a href="https://jason20091226.github.io/">戳这里</a></p><p>转载自CSDN：原链接 <a href="https://blog.csdn.net/qq_43658924/article/details/90321896">戳这里</a></p><p><code>(●&#39;◡&#39;●)</code></p><p>调皮一下（秀Markdown语法）</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>阿巴</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;很久以前就想专门写篇有关oj原理的博客了&lt;br&gt;因为之前对电脑判题的原理有过质疑&lt;br&gt;于是在极长的一段时间内妄想在网络上找到相关的解答&lt;br&gt;后来在问老师问同学问博主问度娘一点一点解惑&lt;br&gt;慢慢总结后&lt;br&gt;大致覆盖了我目前的一些疑惑&lt;/strong&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/10/06/hello-world/"/>
    <id>http://example.com/2021/10/06/hello-world/</id>
    <published>2021-10-06T11:14:17.536Z</published>
    <updated>2021-10-05T04:59:40.127Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
